# version 430
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;


uniform int u_level;
uniform uint u_voxelDim;
uniform int u_numVoxel;

layout(binding = 0, rgb10_a2ui) uniform volatile coherent uimageBuffer u_voxelPos;
layout(binding = 1, rgba8) uniform imageBuffer u_voxelAlbedo;

layout(binding = 2, r32ui) uniform volatile coherent uimageBuffer u_octreeBuf;
layout(binding = 3, r32ui) uniform uimageBuffer u_octreeAlbedo;
//Atomic counter 
//layout(binding = 0, offset = 0) uniform atomic_uint u_allocCount;

void imageAtomicRGBA8Avg(vec4 val, int coord, layout(r32ui) uimageBuffer buf);
uint convVec4ToRGBA8(vec4 val);
vec4 convRGBA8ToVec4(uint val);

void main()
{
	uint threadId = gl_GlobalInvocationID.y * 1024 + gl_GlobalInvocationID.x;
	if (threadId >= u_numVoxel)
		return;
	uvec4 loc = imageLoad(u_voxelPos, int(threadId));
	uint voxelDim = u_voxelDim;
	//Decide max and min coord for the root node
	uvec3 umin, umax;
	uint node, subnode;
	int childIdx = 0;
	bool bFlag = true;
	umin = uvec3(0, 0, 0);
	umax = uvec3(voxelDim, voxelDim, voxelDim);
	// Get the root of octree
	node = imageLoad(u_octreeBuf, childIdx).r;
	for (int i = 0; i < u_level; i++)
	{
		voxelDim /= 2;	//next level number of voxels
		if ((node & 0x80000000) == 0)	//is it empty
		{
			bFlag = false;
			break;
		}
		childIdx = int(node & 0x7FFFFFFF);	//mask out flag bit to get the first child idx
											// find the subnode
		subnode = clamp(int(1 + loc.x - umin.x - voxelDim), 0, 1);
		subnode += 4 * clamp(int(1 + loc.y - umin.y - voxelDim), 0, 1);
		subnode += 2 * clamp(int(1 + loc.z - umin.z - voxelDim), 0, 1);
		childIdx += int(subnode);
		// Update the umin
		umin.x += voxelDim * clamp(int(1 + loc.x - umin.x - voxelDim), 0, 1);
		umin.y += voxelDim * clamp(int(1 + loc.y - umin.y - voxelDim), 0, 1);
		umin.z += voxelDim * clamp(int(1 + loc.z - umin.z - voxelDim), 0, 1);
		node = imageLoad(u_octreeBuf, childIdx).r;
	}
	if (bFlag)
	{
		vec4 col = imageLoad(u_voxelAlbedo, int(threadId));
		//imageStore(u_octreeAlbedo, childIdx, uvec4(1));
		imageAtomicRGBA8Avg(col, childIdx, u_octreeAlbedo);
		//atomicCounterIncrement(u_allocCount);
		//memoryBarrier();
	}
}
vec4 convRGBA8ToVec4(in uint val)
{
	return vec4(float((val & 0x000000FF)), float((val & 0x0000FF00) >> 8U),
		float((val & 0x00FF0000) >> 16U), float((val & 0xFF000000) >> 24U));
}

uint convVec4ToRGBA8(in vec4 val)
{
	return (uint(val.w) & 0x000000FF) << 24U | (uint(val.z) & 0x000000FF) << 16U | (uint(val.y) & 0x000000FF) << 8U | (uint(val.x) & 0x000000FF);
}

void imageAtomicRGBA8Avg(vec4 val, int coord, layout(r32ui) uimageBuffer buf)
{
	val.rgb *= 255.0;
	val.a = 1;

	uint newVal = convVec4ToRGBA8(val);
	uint prev = 0;
	uint cur;

	while ((cur = imageAtomicCompSwap(buf, coord, prev, newVal)) != prev)
	{
		prev = cur;
		vec4 rval = convRGBA8ToVec4(cur);
		rval.xyz = rval.xyz*rval.w;
		vec4 curVal = rval + val;
		curVal.xyz /= curVal.w;
		newVal = convVec4ToRGBA8(curVal);
	}
}